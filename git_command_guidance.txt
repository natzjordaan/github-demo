GIT CONFIGURATION, CLONE AND BASIC GIT WORKFLOW

Find Users location: 	pwd

Create a folder: 	mikdr projects

Clone a branch from GitHub to local: 	git clone https://github.com/natzjordaan/github-demo.git

Check Git status: 	git status

Create any file: 	echo "Test Git Quick Start Demo" >> start.txt

File content: 	cat start.txt

Find a list of file: 	ls

Add a file to staging area: 	git add <file>
								git add .

Unstage a file: 	git reset HEAD <file>

Commit a file: 	git commit -m "Comment history"

Push the change from local to remote GitHub: 	push origin master 





$ cat ~/.gitconfig

$ git config --global core.editor "notepad++.exe -multiInst -nosession"

$ git config --global --list

$ git config --global -e


Create a git project : git init fresh-project 

Unzip the file: $ unzip ~/Downloads/initializr-verekia-4.0.zip

Create a .git folder: $ git init

Remove the file .git: $ git rm -rf .git 

Move the folder to web-project folder: $ git mv folder web-project 

Create sub folders: $ mkdir -p levl1/level2/level3/level5

Remove the folder : rm -rf level5

Add all folders/files : git add . 

Unstage the file: git reset HEAD <file>

Checkout the change - rollback : git checkout -- <file>

Rename the file within GIT: git mv level3-file.txt level3.txt

Rename the file outside GIT: mv level3-file.txt level3.txt

Move the file to folder: $ git mv level2.txt level3/

History log: git help log

Get list of history logs: git log

Get commit ID history logs: git log --abbrev-commit

Get a simple list of history :  git log --oneline --graph --decorate
								git log --all --graph --decorate --oneline
								git log --oneline

Find date range of history : git log --since "3 days ago"

Find the specific change of history: 	git log -- hipster.txt
										git log --follow -- level1/level2/level3
										git show 0a17ac82a0b678a5024ab4a65285161ee2890e51

										
Alias - make it shortcut command: $ git config --global alias.hist "log --all --graph --decorate --oneline"
								  $ git hist
								  
Check the gitconfig: $ cat ~/.gitconfig 


Ignore the files: 	create .gitignore file		
					add a file name to .gitignore
					git status
					this file would be excluded in stage 

download diff /merge tool from https://www.perforce.com/
					
Configuration:  git config --global diff.tool p4merge
				git config --global diff.tool.p4merge.path "C:/Program Files/Perforce/p4merge.exe"
				git config --global difftool.prompt false
				git config --global --list
				git config --global -e
				
				
Configuration:  git config --global merge.tool p4merge
				git config --global merge.tool.p4merge.path "C:/Program Files/Perforce/p4merge.exe"
				git config --global mergetool.prompt false
				git config --global --list
				git config --global -e
				
Compare files:  git diff	
				git difftool
				git diff -- <file>
				git difftool -- <file>

Compare between working directory and Git Repository (Last Commit): git diff HEAD
																	git difftool HEAD
																	
																	
Compare between the staging area and Git Repository : 	git diff --staged 
														git diff --staged HEAD
														
														
Compare between commits: 	git diff f021eeb HEAD	
							git diff HEAD HEAD^
							git diff dd66d84 eb3a7e0
							git difftool dd66d84 eb3a7e0

							
Compare between local and Remote master Repository: git diff master origin/master	
													git difftool master origin/master
List of Branch: git branch -a	
				git branch
		
Create a branch: 	git branch mynewbranch
					git checkout -b <branch name>
		
Switch to new branch: git checkout mynewbranch

Rename a branch: git branch -m mynewbranch newbranch

Delete a branch: git branch -d newbranch

Merge a new branch into master: git checkout master
								git merge <newbranch>
								git merge <newbranch> --no-ff
								git merge <newbranch> -m "comment"

Merge conflicts between master and branch: git mergetool


Rebasing means the feature branch is not done but master has recent changes. So I need to rebase
master into the feature branch. It wont overwrite the feature changes.

Rebasing the feature branch into master:  git checkout myfeature
										  git rebase master 
										  git commit -am "comment" if any changes in myfeature
										  git checkout master	
										  git difftool master myfeature
										  git merge myfeature 
										  
										  
Rebasing conflicts: git checkout bigtrouble
					git commit -am "comment" if any changes
					git checkout master 
					Make some changes in master which could conflict with bigtrouble branch
					git commit -am "comment"
					git rebase master - got conflict error
					git mergetool 
					git status
					git add <file>
					git rebase --continue
					git commit -am "comment" if you make new changes in feature branch
					git checkout master
					git merge bigtrouble

		

Pull with rebase from GitHub: git fetch origin master
							  git status
							  git pull -rebase origin master 
							  git pull origin master
							  git push origin master 
							  
							  
Stash means you are not ready to commit, so stash away the commit. Your temporary changes stored in working directory
and the file will be rollback to the base. 

	In production case - if you need to fix quickly, so stash your changes away and then fix something so it means
	your temporary changes are stored. 
	
Stash: git stash (keep your changes)
	   - then you fix something quickly : git commit -am "comment"
	   
	   now you need to get changes back: git stash apply 


Get list of stash : git stash list 
					git stash drop 
					

Multiple untracked files in working directory: git stash -u
											   git stash pop (both apply and drop at same time)
											   
Manage mulitple stashes: git stash save "comment"	
						 git stash list
		specific stash : git stash show stash@{1}
						 git stash apply stash@{1}
						 git stash drop stash@{1}
						 
Remove all stashes : git stash clear 
					 
Stashing into a branch:  git stash -u					 
						 git stash branch newchanges
						 git stash list
						 git status
						 git checkout master
						 git merge newchanges
						 git branch -d newchanges
						 
						 


Tag significant events: git tag myTag
						git log --oneline --decorate --graph -all
						git tag --list
						git show myTag
						git tag --delete myTag
						
Annotated Tags: git tag -a v-1.0
(more info)		git tag --list 
				git show v-1.0
				
Compare tags:  git tag -a v-1.1
			   change index.html
			   git commit -am "updating tag 1.1"
			   git commit --amend 
			   change - updating tag 1.2
			   git log --oneline --decorate --graph --all
			   git diff v-1.0 v-1.1 or git difftool v-1.0 v-1.1

		  
Tagging a specific commit: git tag -a v-0.9-beta b073059
						
Annotated tag a specific commit : git tag -a v-0.8-alpha 8c0fa5c

Updating existing tags: git tag -a v-0.8-alpha -f (force) 65d8466	 
- move from commit id to another commit id 

 
Using tags with github: git push origin v-0.9-beta
						git push origin v-1.1
						
Push all tages to github: git push origin master --tags




















