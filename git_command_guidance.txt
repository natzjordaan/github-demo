GIT CONFIGURATION, CLONE AND BASIC GIT WORKFLOW

Find Users location: 	pwd

Create a folder: 	mikdr projects

Clone a branch from GitHub to local: 	git clone https://github.com/natzjordaan/github-demo.git

Check Git status: 	git status

Create any file: 	echo "Test Git Quick Start Demo" >> start.txt

File content: 	cat start.txt

Find a list of file: 	ls

Add a file to staging area: 	git add <file>
								git add .

Unstage a file: 	git reset HEAD <file>

Commit a file: 	git commit -m "Comment history"

Push the change from local to remote GitHub: 	push origin master 





$ cat ~/.gitconfig

$ git config --global core.editor "notepad++.exe -multiInst -nosession"

$ git config --global --list

$ git config --global -e


Create a git project : git init fresh-project 

Unzip the file: $ unzip ~/Downloads/initializr-verekia-4.0.zip

Create a .git folder: $ git init

Remove the file .git: $ git rm -rf .git 

Move the folder to web-project folder: $ git mv folder web-project 

Create sub folders: $ mkdir -p levl1/level2/level3/level5

Remove the folder : rm -rf level5

Add all folders/files : git add . 

Unstage the file: git reset HEAD <file>

Checkout the change - rollback : git checkout -- <file>

Rename the file within GIT: git mv level3-file.txt level3.txt

Rename the file outside GIT: mv level3-file.txt level3.txt

Move the file to folder: $ git mv level2.txt level3/

History log: git help log

Get list of history logs: git log

Get commit ID history logs: git log --abbrev-commit

Get a simple list of history :  git log --oneline --graph --decorate
								git log --all --graph --decorate --oneline
								git log --oneline

Find date range of history : git log --since "3 days ago"

Find the specific change of history: 	git log -- hipster.txt
										git log --follow -- level1/level2/level3
										git show 0a17ac82a0b678a5024ab4a65285161ee2890e51

										
Alias - make it shortcut command: $ git config --global alias.hist "log --all --graph --decorate --oneline"
								  $ git hist
								  
Check the gitconfig: $ cat ~/.gitconfig 


Ignore the files: 	create .gitignore file		
					add a file name to .gitignore
					git status
					this file would be excluded in stage 

download diff /merge tool from https://www.perforce.com/
					
Configuration:  git config --global diff.tool p4merge
				git config --global diff.tool.p4merge.path "C:/Program Files/Perforce/p4merge.exe"
				git config --global difftool.prompt false
				git config --global --list
				git config --global -e
				
				
Configuration:  git config --global merge.tool p4merge
				git config --global merge.tool.p4merge.path "C:/Program Files/Perforce/p4merge.exe"
				git config --global mergetool.prompt false
				git config --global --list
				git config --global -e
				
Compare files:  git diff	
				git difftool
				git diff -- <file>
				git difftool -- <file>

Compare between working directory and Git Repository (Last Commit): git diff HEAD
																	git difftool HEAD
																	
																	
Compare between the staging area and Git Repository : 	git diff --staged 
														git diff --staged HEAD
														
														
Compare between commits: 	git diff f021eeb HEAD	
							git diff HEAD HEAD^
							git diff dd66d84 eb3a7e0
							git difftool dd66d84 eb3a7e0

							
Compare between local and Remote master Repository: git diff master origin/master	
													git difftool master origin/master
List of Branch: git branch -a	
				git branch
		
Create a branch: 	git branch mynewbranch
					git checkout -b <branch name>
		
Switch to new branch: git checkout mynewbranch

Rename a branch: git branch -m mynewbranch newbranch

Delete a branch: git branch -d newbranch

Merge a new branch into master: git checkout master
								git merge <newbranch>
								git merge <newbranch> --no-ff
								git merge <newbranch> -m "comment"

Merge conflicts between master and branch: git mergetool


		






















